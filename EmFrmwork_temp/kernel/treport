                               测试报告
一，测试对象：
    嵌入式平台框架
二，测试目的：
    测试嵌入式平台框架的稳定性，正确性和合理性；
    作为使用gtest的实例；我们尽可能多的使用gtest提供的api
三，测试工具：
    gtest
四，测试内容：
    1,内存配置(cmemory)
    2,链表(clinklist)
    3,队列(cqueue)
    4,基本对象(cobject)
五，使用方式：
    代码环境为vs2015，静态链接gtest.lib，为保证测试迅速，测试结果清晰，建议单独链接每个文件；
    也可以使用gtest的方式对测试内容进行控制(命令行)，但是可能在windows下并不方便。
六，测试结果：
    测试代码为c++，使用gtest辅助测试，根据嵌入式平台的测试代码所写，测试过程中发现的问题，
    有可能是对嵌入式平台代码不熟悉导致。测试结果在终端和xml文件中均可以获得。
    描述以文件为类：
    1，tmem.cpp：
       测试cmemory.c中的api,内容为内存配置，使用自定义内存配置器，测试方法为参数化测试和死亡测试，
       继承自::testing::Test和::testing::WithParamInterface<>，这两种测试方法可以在gtest教程找到详细的
       介绍，因为使用死亡测试，所以并不支持多线程。
       测试参数使用gtest的参数生成器::testing::Range()，对不同大小的内存块进行申请，获取使用内存使用
       数量，再进行释放。gtest保证了每次的测试顺序为随机，互相独立。
       测试问题：
       (1)测试结果从第二次开始，获取到的使用 数量并不正确。释放内存函数返回是正确的。
       (2)死亡测试失败，在参数为负数的情况下，测试并不能如预期的死亡。
    2，tlinklist.cpp:
       参数化测试，测试对象为链表和简单链表，分别对应LinklistTest和SimpleListTest,测试结果目前正常
    3，tqueue.cpp:
       测试方式是参数化测试，使用Range()函数获得，主要测试出队和入队，测试结果正常
    4，tobject.cpp:
       测试方法是参数化测试，测试内容为两个tobject对象单向发送消息，对收到的消息进行判断，发送方式为立刻
       发送(CsendMessage())和定时发送(CsendMessageTiming(,))。一个测试案例。子函数memtest用来测试内存使用
       情况，使用gtest的跟踪函数。测试结果正确，但是会发送测试时间很长的情况，这种情况下大约5次会发生，
       目前并不清楚原因。
七，测试方式的选择：
    本次测试使用的最基本的方式为参数化测试，目的在于尽可能多的覆盖测试，对于比较特殊的死亡测试使用不多，嵌入式平台
    框架并不把死亡作为程序在异常情况下的比较优先的处理方式。对于类型测试，本次测试并不涉及，并没有合适的地方使用类型
    测试，比如内存配置部分，虽然可能会配置不同的类型，但是对于不同类型使用sizeof(type)，本质上都是一样的。

